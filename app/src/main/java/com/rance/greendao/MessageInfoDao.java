package com.rance.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.rance.chatui.enity.MessageInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MESSAGE_INFO".
*/
public class MessageInfoDao extends AbstractDao<MessageInfo, Long> {

    public static final String TABLENAME = "MESSAGE_INFO";

    /**
     * Properties of entity MessageInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property MsgId = new Property(0, Long.class, "msgId", true, "_id");
        public final static Property Type = new Property(1, int.class, "type", false, "TYPE");
        public final static Property Content = new Property(2, String.class, "content", false, "CONTENT");
        public final static Property Filepath = new Property(3, String.class, "filepath", false, "FILEPATH");
        public final static Property SendState = new Property(4, int.class, "sendState", false, "SEND_STATE");
        public final static Property Time = new Property(5, Long.class, "time", false, "TIME");
        public final static Property Header = new Property(6, String.class, "header", false, "HEADER");
        public final static Property VoiceTime = new Property(7, long.class, "voiceTime", false, "VOICE_TIME");
        public final static Property FileType = new Property(8, String.class, "fileType", false, "FILE_TYPE");
        public final static Property MimeType = new Property(9, String.class, "mimeType", false, "MIME_TYPE");
        public final static Property Name = new Property(10, String.class, "name", false, "NAME");
        public final static Property Phonenumber = new Property(11, String.class, "phonenumber", false, "PHONENUMBER");
        public final static Property Surname = new Property(12, String.class, "surname", false, "SURNAME");
        public final static Property Subject = new Property(13, String.class, "subject", false, "SUBJECT");
        public final static Property Text = new Property(14, String.class, "text", false, "TEXT");
        public final static Property Stream = new Property(15, String.class, "stream", false, "STREAM");
        public final static Property Url = new Property(16, String.class, "url", false, "URL");
    }


    public MessageInfoDao(DaoConfig config) {
        super(config);
    }
    
    public MessageInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MESSAGE_INFO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: msgId
                "\"TYPE\" INTEGER NOT NULL ," + // 1: type
                "\"CONTENT\" TEXT," + // 2: content
                "\"FILEPATH\" TEXT," + // 3: filepath
                "\"SEND_STATE\" INTEGER NOT NULL ," + // 4: sendState
                "\"TIME\" INTEGER," + // 5: time
                "\"HEADER\" TEXT," + // 6: header
                "\"VOICE_TIME\" INTEGER NOT NULL ," + // 7: voiceTime
                "\"FILE_TYPE\" TEXT," + // 8: fileType
                "\"MIME_TYPE\" TEXT," + // 9: mimeType
                "\"NAME\" TEXT," + // 10: name
                "\"PHONENUMBER\" TEXT," + // 11: phonenumber
                "\"SURNAME\" TEXT," + // 12: surname
                "\"SUBJECT\" TEXT," + // 13: subject
                "\"TEXT\" TEXT," + // 14: text
                "\"STREAM\" TEXT," + // 15: stream
                "\"URL\" TEXT);"); // 16: url
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MESSAGE_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, MessageInfo entity) {
        stmt.clearBindings();
 
        Long msgId = entity.getMsgId();
        if (msgId != null) {
            stmt.bindLong(1, msgId);
        }
        stmt.bindLong(2, entity.getType());
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(3, content);
        }
 
        String filepath = entity.getFilepath();
        if (filepath != null) {
            stmt.bindString(4, filepath);
        }
        stmt.bindLong(5, entity.getSendState());
 
        Long time = entity.getTime();
        if (time != null) {
            stmt.bindLong(6, time);
        }
 
        String header = entity.getHeader();
        if (header != null) {
            stmt.bindString(7, header);
        }
        stmt.bindLong(8, entity.getVoiceTime());
 
        String fileType = entity.getFileType();
        if (fileType != null) {
            stmt.bindString(9, fileType);
        }
 
        String mimeType = entity.getMimeType();
        if (mimeType != null) {
            stmt.bindString(10, mimeType);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(11, name);
        }
 
        String phonenumber = entity.getPhonenumber();
        if (phonenumber != null) {
            stmt.bindString(12, phonenumber);
        }
 
        String surname = entity.getSurname();
        if (surname != null) {
            stmt.bindString(13, surname);
        }
 
        String subject = entity.getSubject();
        if (subject != null) {
            stmt.bindString(14, subject);
        }
 
        String text = entity.getText();
        if (text != null) {
            stmt.bindString(15, text);
        }
 
        String stream = entity.getStream();
        if (stream != null) {
            stmt.bindString(16, stream);
        }
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(17, url);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, MessageInfo entity) {
        stmt.clearBindings();
 
        Long msgId = entity.getMsgId();
        if (msgId != null) {
            stmt.bindLong(1, msgId);
        }
        stmt.bindLong(2, entity.getType());
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(3, content);
        }
 
        String filepath = entity.getFilepath();
        if (filepath != null) {
            stmt.bindString(4, filepath);
        }
        stmt.bindLong(5, entity.getSendState());
 
        Long time = entity.getTime();
        if (time != null) {
            stmt.bindLong(6, time);
        }
 
        String header = entity.getHeader();
        if (header != null) {
            stmt.bindString(7, header);
        }
        stmt.bindLong(8, entity.getVoiceTime());
 
        String fileType = entity.getFileType();
        if (fileType != null) {
            stmt.bindString(9, fileType);
        }
 
        String mimeType = entity.getMimeType();
        if (mimeType != null) {
            stmt.bindString(10, mimeType);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(11, name);
        }
 
        String phonenumber = entity.getPhonenumber();
        if (phonenumber != null) {
            stmt.bindString(12, phonenumber);
        }
 
        String surname = entity.getSurname();
        if (surname != null) {
            stmt.bindString(13, surname);
        }
 
        String subject = entity.getSubject();
        if (subject != null) {
            stmt.bindString(14, subject);
        }
 
        String text = entity.getText();
        if (text != null) {
            stmt.bindString(15, text);
        }
 
        String stream = entity.getStream();
        if (stream != null) {
            stmt.bindString(16, stream);
        }
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(17, url);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public MessageInfo readEntity(Cursor cursor, int offset) {
        MessageInfo entity = new MessageInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // msgId
            cursor.getInt(offset + 1), // type
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // content
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // filepath
            cursor.getInt(offset + 4), // sendState
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5), // time
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // header
            cursor.getLong(offset + 7), // voiceTime
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // fileType
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // mimeType
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // name
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // phonenumber
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // surname
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // subject
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // text
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // stream
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16) // url
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, MessageInfo entity, int offset) {
        entity.setMsgId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setType(cursor.getInt(offset + 1));
        entity.setContent(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setFilepath(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setSendState(cursor.getInt(offset + 4));
        entity.setTime(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
        entity.setHeader(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setVoiceTime(cursor.getLong(offset + 7));
        entity.setFileType(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setMimeType(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setName(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setPhonenumber(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setSurname(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setSubject(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setText(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setStream(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setUrl(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(MessageInfo entity, long rowId) {
        entity.setMsgId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(MessageInfo entity) {
        if(entity != null) {
            return entity.getMsgId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(MessageInfo entity) {
        return entity.getMsgId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
